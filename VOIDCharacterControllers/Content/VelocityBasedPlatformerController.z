class VelocityBasedPlatformerController : ZilchComponent
{
    [Dependency]
    var RigidBody : RigidBody;
    
    [Dependency]
    var GravityEffect : GravityEffect;
    
    [Dependency]
    var GroundDetection : GroundDetection;
    
    //Getter-Setter for RigidBody.Velocity
    var Velocity : Real3
    {
        get { return this.RigidBody.Velocity; }
        set { this.RigidBody.Velocity = value; }
    }
    
    //Velocity for side to side movement on ground
    [Property]
    var GroundVelocity : Real = 5.0;
    
    //Multiplier for MoveVelocity when sprinting
    [Property]
    var SprintModifier : Real = 2.0;
    
    //Force to be applied opposite of WorldUp when Jumping
    [Property]
    var JumpVelocity : Real = 3.0;
    
    //Mexium number of jumps before the player must land again
    [Property]
    var MaxJumpCount : Integer = 2;
    
    [Property]
    var MaxVelocity : Real = 25;
    
    //Current number of jumps
    var JumpCount : Integer = 0;
    
    function Initialize(init : CogInitializer)
    {
        Console.WriteLine("Init");
        Zero.Connect(init, Events.AllObjectsInitialized, this.OnAllObjectsInitialized);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CharMoveEvent, this.OnCharMoveEvent);
    }

    function OnAllObjectsInitialized(event : CogInitializerEvent)
    {
        Console.WriteLine("AllInit");
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        Console.WriteLine("Update");
    }

    function OnCharMoveEvent(event : CharMoveEvent)
    {
        Console.WriteLine("Received");
        //If the player is partially on ground
        if(this.GroundDetection.IsOnGround || this.GroundDetection.IsPartiallyOnGround)
        {
            //Store current velocity as "curVel"
            var curVel = this.Velocity;
            
            //Create 3D move variable "moveDir"
            var moveDir = Real3();
            //If 1D PlayerInput.MoveDir says move left
            if(event.MoveDir == -1)
                //Set "moveDir" to scaled groundnormal rotated by Math.Pi/2.0
                moveDir = Math.RotateVector(this.GroundDetection.GroundNormal, Real3(0,0,1), Math.Pi/2.0);
            //If 1D PlayerInput.MoveDir says move right
            else if(event.MoveDir == 1)
                //Set "moveDir" to scaled groundnormal rotated by -Math.Pi/2.0
                moveDir = Math.RotateVector(this.GroundDetection.GroundNormal, Real3(0,0,1), -Math.Pi/2.0);
            
            //Set local variable "curVel" to "moveDir"
            curVel = moveDir * this.GroundVelocity;
            
            //Check if sprint button down
            if(event.SprintKeyDown)
                //Multiply "curVel.X" by SprintModifier
                curVel = curVel * this.SprintModifier;
            
            curVel = Math.Clamp(curVel, -this.MaxVelocity.XXX, this.MaxVelocity.XXX);
            //set Velocity to "curVel"
            this.Velocity = curVel;
        }
    }
}
