class GroundDetection : ZilchComponent
{
    [Dependency]
    var Transform : Transform;    
    
    [Dependency]
    var Collider : Collider;
    
    [Dependency]
    var GravityEffect : GravityEffect;
    
    //Getter-Setter translating input/output to/from radians for MaxGroundSlopeRad
    [Property]
    var MaxGroundSlope : Real;
    var MaxGroundSlopeRad : Real
    {
        get { return Math.ToRadians(this.MaxGroundSlope); }
        set { this.MaxGroundSlope = Math.ToDegrees(value); }
    }
    
    //Is the object majoritively on a valid ground
    var IsOnGround : Boolean = false;
    //Is the object at least partially on a valid ground
    var IsPartiallyOnGround : Boolean = false;
    
    //Current ground object, null if not on ground
    var Ground : Cog = null;
    //Normal of contact face of current ground object, Real3(0,0,0) if no ground
    var GroundNormal : Real3;
    
    //Should this component debug print to the console
    [Property]
    var DebugPrint : Boolean = false;
    
    [Property]
    var DrawDebug : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Reset all ground data to avoid state leakage from last frame
        this.IsOnGround = false;
        this.IsPartiallyOnGround = false;
        this.Ground = null;
        this.GroundNormal = Real3();
        
        //store my position locally
        var myPos = this.Owner.Transform.WorldTranslation;
        //store my scale locally
        var myScale = this.Owner.Transform.Scale;
        
        //Cast a ray down from the left edge of the object
        var castRayL = Ray();
        castRayL.Start = myPos - Real3(myScale.X/2, 0, 0);
        castRayL.Direction = this.GravityEffect.Direction;
        var castResultL = this.Space.PhysicsSpace.CastRayFirst(castRayL);
        
        //Cast a ray down from the right edge of the object
        var castRayR = Ray();
        castRayR.Start = myPos + Real3(myScale.X/2, 0, 0);
        castRayR.Direction = this.GravityEffect.Direction;
        var castResultR = this.Space.PhysicsSpace.CastRayFirst(castRayR);
        
        //Cast a ray down from the middle of the object
        var castRayM = Ray();
        castRayM.Start = myPos;
        castRayM.Direction = this.GravityEffect.Direction;
        var castResultM = this.Space.PhysicsSpace.CastRayFirst(castRayM);
        
        if(this.DebugPrint)
        {
            Console.WriteLine("LeftRay Hit: `castResultL.ObjectHit`");
            Console.WriteLine("RightRay Hit: `castResultR.ObjectHit`");
            Console.WriteLine("MidRay Hit: `castResultM.ObjectHit`");
        }
        
        if(this.DrawDebug)
        {
            this.DrawRay(castRayL, castResultL.Distance);
            this.DrawRay(castRayR, castResultR.Distance);
            this.DrawRay(castRayM, castResultM.Distance);
        }
        
        //Iterate through the contacts on the object's collider
        foreach(var contact in this.Collider.Contacts)
        {
            //store the negative normal of the contact (towards me)
            var normal = -contact.FirstPoint.WorldNormalTowardsOther;
            
            //Use the dot product and Math.ACos to ge the angle of the ground
            var cosineOfAngle = Math.Dot(normal, -this.GravityEffect.Direction);
            cosineOfAngle = Math.Clamp(cosineOfAngle, -1.0, 1.0);
            var angle = Math.ACos(cosineOfAngle);
            
            //Debug print if desired
            if(this.DebugPrint)
                //Print ground angle
                Console.WriteLine("Ground Angle: `Math.ToDegrees(angle)`");
            
            //Check the ground angle against MaxGroundSlope
            if(angle > this.MaxGroundSlopeRad)
                //Skip this contact if angle is invalid
                continue;
            //Console.WriteLine("HI");
            //Check if middle cast, and left or right cast hit this contact
            if(castResultM.ObjectHit == contact.OtherObject &&
               (castResultL.ObjectHit == contact.OtherObject ||
               castResultR.ObjectHit == contact.OtherObject))
            {
                //Set IsOnGround state data
                this.IsOnGround = true;
                this.IsPartiallyOnGround = true;
                this.Ground = contact.OtherObject;
                this.GroundNormal = normal;
                
                //Debug print if desired
                if(this.DebugPrint)
                    //Print "OnGround"
                    Console.WriteLine("OnGround");
                
                //Stop searching we found our ground
                return;
            }
            //Check if just left or right cast hit the contact
            else if(castResultL.ObjectHit == contact.OtherObject ||
                    castResultR.ObjectHit == contact.OtherObject)
            {
                //Set IsPartiallyOnGround state data
                this.IsPartiallyOnGround = true;
                this.Ground = contact.OtherObject;
                this.GroundNormal = normal;
                
                //Debug print if desired
                if(this.DebugPrint)
                    //Print "PartiallyOnGround"
                    Console.WriteLine("PartiallyOnGround");
                
                //Stop searching we found our ground
                return;
            }
        }
        
        //Debug print if desired
        if(this.DebugPrint)
            //Print "Not On Ground"
            Console.WriteLine("Not On Ground");
    }
    
    function DrawRay(ray : Ray, len : Real)
    {
        var line = DebugLine();
        line.Start = ray.Start;
        line.End = ray.Start + (ray.Direction * len);
        line.Color = Real4(1,1,1,1);
        DebugDraw.Add(line);
    }
}
