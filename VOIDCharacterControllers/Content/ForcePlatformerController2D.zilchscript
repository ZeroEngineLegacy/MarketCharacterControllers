/************************************************************************************************************/
/* Copyright 2017 DigiPen, All Rights Reserved                                                              */
/* Last Update: 1/4/2017                                                                                    */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Arend Danielek                                                                          */
/* Class: ForceBasedPlatformerController2D                                                                    */
/* Brief: Implements a basic force based 2D dynamic side view platformer controller.                        */
/************************************************************************************************************/

class ForcePlatformerController2D : ZilchComponent
{
  [Dependency]
  var RigidBody : RigidBody = null;
  
  [Dependency]
  var GravityEffect : GravityEffect = null;
  
  [Dependency]
  var KeyboardInterpreter2D : KeyboardInterpreter2D = null;
  
  [Dependency]
  var GroundDetection2D : GroundDetection2D = null;
  
  [Property]
  var MoveForce : Real = 10;
  
  // Multiplier for MoveVelocity when sprinting
  [Property]
  var SprintModifier : Real = 2.0;
  
  // Force to be applied opposite of WorldUp when Jumping
  [Property]
  var JumpForce : Real = 250.0;
  
  [Property]
  var MaxGroundSpeed : Real = 25;
  
  // Maxium number of jumps before the player must land again
  [Property]
  var MaxJumpCount : Integer = 2;
  
  // Current number of jumps used since last on ground
  var JumpCount : Integer = 0;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CharMoveEvent2D, this.OnCharMoveEvent2D);
  }
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    // If the character is on a walkable surface clamp the current velocity to MaxGroundSpeed
    if (this.GroundDetection2D.IsOnGround || this.GroundDetection2D.IsPartiallyOnGround)
    {
      var velLenSq = Math.LengthSq(this.RigidBody.Velocity);
      
      if (velLenSq > this.MaxGroundSpeed * this.MaxGroundSpeed)
      {
        // Normalize and scale
        this.RigidBody.Velocity /= Math.Sqrt(velLenSq);
        this.RigidBody.Velocity *= this.MaxGroundSpeed;
      }
    }
  }
  
  function OnCharMoveEvent2D(event : CharMoveEvent2D)
  {
    // If the character is on a walkable surface
    if (this.GroundDetection2D.IsOnGround || this.GroundDetection2D.IsPartiallyOnGround)
    {
      // The movement force should be applied parallel to walkable surface.
      // To do this we rotate the surface normal by 90 or -90 degrees to get
      // a direction for the force.
      var dir = Real3();
      var angle = 0.0;
      
      if (event.MoveDir == -1)
      {
        angle = -Math.Pi * 0.5;
        dir = Math.RotateVector(this.GroundDetection2D.GroundNormal, Real3(0,0,1), angle);
      }
      else if (event.MoveDir == 1)
      {
        angle = Math.Pi * 0.5;
        dir = Math.RotateVector(this.GroundDetection2D.GroundNormal, Real3(0,0,1), angle);
      }
      
      var force = dir * this.MoveForce;
      
      // Scale the movement force if the sprint key is down
      if (event.SprintKeyDown)
      {
        force *= this.SprintModifier;
      }
      
      this.RigidBody.ApplyForce(force);
    }
    
    if (event.JumpKeyPressed)
    {
      // If the character IsOnGround this is the first jump
      if (this.GroundDetection2D.IsOnGround)
      {
        this.JumpCount = 1;
        this.Jump();
      }
      // If the character is not on ground but still has jumps left let it jump
      else if (this.JumpCount < this.MaxJumpCount)
      {
        this.JumpCount += 1;
        this.Jump();
      }
    }
  }
  
  function Jump()
  {
    // Apply the jump force opposite the pull of gravity
    var dir = -this.GravityEffect.Direction;
    
    this.RigidBody.ApplyForce(dir * this.JumpForce);
  }
}
