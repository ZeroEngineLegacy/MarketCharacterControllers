/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Last Update: 12/13/2016                                                                                  */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Arend Danielek                                                                          */
/* Class: VelocityPlatformerController                                                                      */
/* Brief: Implements a basic velocity based 2D dynamic side view platformer controller.                     */
/************************************************************************************************************/

class VelocityPlatformerController : ZilchComponent
{
    [Dependency]
    var RigidBody : RigidBody;
    
    [Dependency]
    var GravityEffect : GravityEffect;
    
    [Dependency]
    var GroundDetection : GroundDetection;
    
    //Getter-Setter for RigidBody.Velocity
    var Velocity : Real3
    {
        get { return this.RigidBody.Velocity; }
        set { this.RigidBody.Velocity = value; }
    }
    
    //Velocity for side to side movement on ground
    [Property]
    var MoveSpeed : Real = 5.0;
    
    //Multiplier for MoveVelocity when sprinting
    [Property]
    var SprintModifier : Real = 2.0;
    
    //Force to be applied opposite of WorldUp when Jumping
    [Property]
    var JumpVelocity : Real = 3.0;
    
    [Property]
    var MaxGroundSpeed : Real = 25;
    
    //Maxium number of jumps before the player must land again
    [Property]
    var MaxJumpCount : Integer = 2;
    
    //Current number of jumps used since last on ground
    var JumpCount : Integer = 0;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CharMoveEvent, this.OnCharMoveEvent);
        Zero.Connect(this.Owner, Events.CharJumpEvent, this.OnCharJumpEvent);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.GroundDetection.IsOnGround || this.GroundDetection.IsPartiallyOnGround)
            this.Velocity = Math.Clamp(this.RigidBody.Velocity, -this.MaxGroundSpeed.XXX, this.MaxGroundSpeed.XXX);
    }
    
    function OnCharMoveEvent(event : CharMoveEvent)
    {
        //If the player is partially on ground
        if(this.GroundDetection.IsOnGround || this.GroundDetection.IsPartiallyOnGround)
        {
            //The movement force should be applied parallel to walkable surface.
            //To do this we rotate the surface normal by 90 or -90 degrees to get
            //a direction for the velocity.
            var angle = 0.0;
            if(event.MoveDir == -1)
                angle = -Math.Pi/2;
            else if(event.MoveDir == 1)
                angle = Math.Pi/2;
            
            var dir = Math.RotateVector(this.GroundDetection.GroundNormal, Real3(0,0,1), angle);
            var newVel = dir * this.MoveSpeed;
            
            //Check if sprint button down
            if(event.SprintKeyDown)
                newVel = newVel * this.SprintModifier;
            
            this.Velocity = newVel;
        }
    }

    function OnCharJumpEvent(event : CharJumpEvent)
    {
        //If the character IsOnGround this is the first jump
        if(this.GroundDetection.IsOnGround)
        {
            this.JumpCount = 1;
            this.Jump();
        }
        //If the character is not on ground but still has jumps left let it jump
        else if(this.JumpCount < this.MaxJumpCount)
        {
            this.JumpCount += 1;
            this.Jump();
        }
    }
    
    function Jump()
    {
        var vel = this.Velocity;
        vel.Y = this.JumpVelocity;
        this.Velocity = vel;
    }
}
